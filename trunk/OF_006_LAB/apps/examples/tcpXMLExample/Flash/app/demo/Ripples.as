package app.demo{	import flash.display.Sprite;	import com.touchlib.*;	//import app.core.canvas.RippleCanvas;		public class Ripples extends Sprite {				//private var subobj:RippleCanvas;				public function Ripples() {					trace("running");			TUIO.init( this, 'localhost', 3000, '', false );			//var subobj = new RippleCanvas();			//this.addChild(subobj);						this.addEventListener(TUIOEvent.TUIO_MOVE, this.tuioMoveHandler, false, 0, true);						this.addEventListener(TUIOEvent.TUIO_DOWN, this.tuioDownEvent, false, 0, true);									this.addEventListener(TUIOEvent.TUIO_UP, this.tuioUpEvent, false, 0, true);												this.addEventListener(TUIOEvent.TUIO_OVER, this.tuioRollOverHandler, false, 0, true);												this.addEventListener(TUIOEvent.TUIO_OUT, this.tuioRollOutHandler, false, 0, true);						this.addEventListener(MouseEvent.MOUSE_MOVE, this.mouseMoveHandler, false, 0, true);												this.addEventListener(MouseEvent.MOUSE_DOWN, this.mouseDownEvent, false, 0, true);																		this.addEventListener(MouseEvent.MOUSE_UP, this.mouseUpEvent, false, 0, true);				this.addEventListener(MouseEvent.ROLL_OVER, this.mouseRollOverHandler, false, 0, true);			this.addEventListener(MouseEvent.ROLL_OVER, this.mouseRollOutHandler, false, 0, true);						public function tuioDownEvent(e:TUIOEvent)			{							//TUIO.listenForObject(e.ID, this);				knobStartDrag();							e.stopPropagation();			}				public function tuioUpEvent(e:TUIOEvent)			{						knobStopDrag();						e.stopPropagation();			}						public function tuioMoveHandler(e:TUIOEvent)			{				if(isActive)				{					var tuioobj:TUIOObject = TUIO.getObjectById(e.ID);																	var localPt:Point = globalToLocal(new Point(tuioobj.x, tuioobj.y));																			activeX = localPt.x;					activeY = localPt.y;					var ang:Number = Math.atan2(activeY-gfxRadius, activeX-gfxRadius);					var val:Number;					val = 0.25 + (ang / (Math.PI*2));					val += 0.5;					val %= 1.0;					setValue(val);					}					e.stopPropagation();						}						public function tuioRollOverHandler(e:TUIOEvent)			{							}						public function tuioRollOutHandler(e:TUIOEvent)			{				e.stopPropagation();									}									public function mouseDownEvent(e:MouseEvent)			{							mouseActive = true;				knobStartDrag();			}						public function mouseUpEvent(e:MouseEvent)			{							knobStopDrag();				}						public function mouseMoveHandler(e:MouseEvent)			{				if(isActive)				{					activeX = this.mouseX;					activeY = this.mouseY;					var ang:Number = Math.atan2(activeY-gfxRadius, activeX-gfxRadius);					var val:Number;					val = 0.25 + (ang / (Math.PI*2));					val += 0.5;					val %= 1.0;					setValue(val);								}			}						public function mouseRollOverHandler(e:MouseEvent)			{			}						public function mouseRollOutHandler(e:MouseEvent)			{	//			sliderStopDrag();									}							*/		}	}}